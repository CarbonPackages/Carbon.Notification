// Add a notification.

// `type` can be `alert`, `warning` (default), `info` , `success` or `backend`
// To add your own type you have to define them in your Settings.yaml

prototype(Carbon.Notification:Tag) < prototype(Neos.Fusion:Component) {
    tagName = 'div'
    content = ${value}

    // pass an optional class to the tag
    class = null

    // Set alternative language
    lang = null

    // type can be alert, warning, info, success or backend
    // To add your own type you have to define them in your Settings.yaml
    type = 'warning'

    // Internal
    typeConfig = ${this.type ? this.config.types[this.type] : null}
    config = ${Configuration.setting('Carbon.Notification')}
    @if.hasContent = ${this.content}

    renderer = Neos.Fusion:Tag {
        tagName = ${props.tagName}
        attributes {
            class = ${props.class}
            lang = ${props.lang}
            style = Neos.Fusion:Loop {
                @glue = ';'
                // Merge all given styles together
                items = ${Array.filter(Array.concat(props.config.default, props.typeConfig || {}, props, {type : null, tagName: null, content: null, config: null, typeConfig: null, class: null, lang: null}), entry => !!String.length(entry))}
                itemRenderer = ${itemKey + ':' + item}
            }
        }
        content = ${props.content}
        @process.convertToFinalUri = Neos.Neos:ConvertUris {
            force = true
        }
    }
}
